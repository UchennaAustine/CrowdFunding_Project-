[07:20, 27/09/2023] Dev. Wills: export const likePost = async (req: Request, res: Response) => {
  try {
    const { authID, postID } = req.params;

    const auth: any = await authModel.findById(authID);
    const post: any = await postModel.findById(postID);

    if (auth) {
      post?.likes?.push(new mongoose.Types.ObjectId(auth._id!));
      post?.save();

      return res.status(201).json({
        message: "like a Post",
        length: post?.likes.length,
        data: post,
      });
    } else {
      return res.status(404).json({
        message: "Error",
      });
    }
  } catch (error) {
    return res.status(404).json({
      message: "Unable to like Posts",
    });
  }
};
[07:20, 27/09/2023] Dev. Wills: export const unLikePost = async (
  req: Request,
  res: Response,
): Promise<Response> => {
  try {
    const { authID, postID } = req.params;

    const auth: any = await authModel.findById(authID);
    const post: any = await postModel.findById(postID);

    if (auth) {
      post?.likes?.pull(new mongoose.Types.ObjectId(auth._id!));
      post?.save();

      return res.status(201).json({
        message: "unlike a Post",
        data: post,
        length: post?.likes.length,
      });
    } else {
      return res.status(404).json({
        message: "Error",
      });
    }
  } catch (error) {
    return res.status(404).json({
      message: "Unable to unlike a Posts",
    });
  }
};

export const unLoveBeg = async (req: any, res: Response) => {
  try {
    const { id: userID } = req.user;
    const { begID } = req.params;

    const abeg = await prisma.crowdAbeg.findUnique({
      where: { id: begID },
    });
    if (abeg?.love.includes(userID)) {
      const unlike = abeg?.love.filter((el: any) => {
        return el !== userID;
      });
      // console.log(unlike);
      const beg = await prisma.crowdAbeg.update({
        where: { id: begID },
        data: {
          love: unlike,
        },
      });
      return res.status(HTTP.CREATED).json({
        message: "you just unloved this plead",
        data: beg,
      });
    } else {
      return res.status(HTTP.BAD_REQUEST).json({
        message: "you have already loved this plead",
      });
    }
  } catch (error: any) {
    return res.status(HTTP.BAD_REQUEST).json({
      message: `Error unloving plead: ${error}`,
      data: error.message,
    });
  }
};

if (abeg.category === categories.EDUCATION) {
      const oneCategory = await prisma.crowdAbeg.findUnique({
        where: { id: abeg.id },
      });
      oneCategory?.education.push(abeg.id);
      // console.log("checking", oneCategory);

      const myUpdate = await prisma.crowdAbeg.update({
        where: { id: abeg.id },
        data: {
          education: abeg.education,
        },
      });
      // console.log(myUpdate);
    } else if (abeg.category === categories.ENVIRONMENT) {
      const oneCategory = await prisma.crowdAbeg.findUnique({
        where: { id: abeg.id },
      });
      oneCategory?.environment.push(abeg.id);
      // console.log(oneCategory);

      await prisma.crowdAbeg.update({
        where: { id: abeg.id },
        data: {
          environment: abeg.environment,
        },
      });
    } else if (category === categories.FINANCE) {
      const oneCategory = await prisma.crowdAbeg.findUnique({
        where: { id: abeg.id },
      });
      oneCategory?.finance.push(abeg.id);
      console.log(oneCategory);

      const myUpdate = await prisma.crowdAbeg.update({
        where: { id: abeg.id },
        data: {
          finance: abeg.finance,
        },
      });
      // console.log(myUpdate);
    } else if (category === categories.HEALTH) {
      const oneCategory = await prisma.crowdAbeg.findUnique({
        where: { id: abeg.id },
      });
      oneCategory?.health.push(abeg.id);

      const myUpdate = await prisma.crowdAbeg.update({
        where: { id: abeg.id },
        data: {
          health: abeg.health,
        },
      });

      // console.log(myUpdate);
    } else if (
      abeg.category !== categories.EDUCATION ||
      categories.ENVIRONMENT ||
      categories.FINANCE ||
      categories.HEALTH
    ) {
      const oneCategory = await prisma.crowdAbeg.findUnique({
        where: { id: abeg.id },
      });
      oneCategory?.others.push(abeg.id);

      const myOthers = await prisma.crowdAbeg.update({
        where: { id: abeg.id },
        data: {
          others: abeg.others,
        },
      });
      // console.log(myOthers);
    }